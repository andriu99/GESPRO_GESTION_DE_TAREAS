<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DocumentBuildExceptionDetailBuildRelationshipWithCollectionOfObjects" xml:space="preserve">
    <value>Unable to build '{0}' for a single json:api relationship [rel={1}] with a collection of '{0}' objects.</value>
  </data>
  <data name="DocumentBuildExceptionDetailBuildResourceCollectionCountMismatch" xml:space="preserve">
    <value>Unable to build '{0}' for a collection [count={1}] of CLR resources or CLR resource identifiers [type={2}] with a collection [count={3}] of '{0}' objects, collection counts mismatch. Make sure the collection counts are the same.</value>
  </data>
  <data name="DocumentBuildExceptionDetailBuildResourceCollectionWithSingleObject" xml:space="preserve">
    <value>Unable to build '{0}' for a collection of CLR resources or CLR resource identifiers [type={1}] with a single '{0}' object.</value>
  </data>
  <data name="DocumentBuildExceptionDetailBuildResourceWithCollectionOfObjects" xml:space="preserve">
    <value>Unable to build '{0}' for a single CLR resource or CLR resource identifier [type={1}] with a collection of '{0}' objects.</value>
  </data>
  <data name="DocumentBuildExceptionDetailBuildToManyRelationshipResourceLinkageCardinalityMismatch" xml:space="preserve">
    <value>Unable to build CLR resource[type={0}] relationship[rel={1}] 'to-many' resource linkage with 'to-one' resource linkage.</value>
  </data>
  <data name="DocumentBuildExceptionDetailBuildToOneRelationshipResourceLinkageCardinalityMismatch" xml:space="preserve">
    <value>Unable to build CLR resource[type={0}] relationship[rel={1}] 'to-one' resource linkage with 'to-many' resource linkage.</value>
  </data>
  <data name="DocumentBuildExceptionTitle" xml:space="preserve">
    <value>Document Build Error</value>
  </data>
  <data name="DocumentContextExtensionValidationConfigurationError" xml:space="preserve">
    <value>{0} was not configured for this document context.</value>
  </data>
  <data name="DocumentReadExceptionGetMultipleResourcesExistWithSameIdentity" xml:space="preserve">
    <value>Unable to get the single CLR resource [type={0} id={1}] in the json:api document, json:api document has multiple resources with the same resource identity.</value>
  </data>
  <data name="DocumentReadExceptionGetMultipleResourcesExistWithSameType" xml:space="preserve">
    <value>Unable to get the single CLR resource or resource identifier [type={0}] in the json:api document, json:api document has multiple resources or resource identifiers with the same resource type.</value>
  </data>
  <data name="DocumentReadExceptionGetToManyRelatedResourceCollectionWithToOneRelationship" xml:space="preserve">
    <value>Unable to get the 'to-many' related CLR resource collection [type={0}] with a 'to-one' CLR relationship object. Call the get 'to-many' related CLR resource collection method with a 'to-many' CLR relationship object.</value>
  </data>
  <data name="DocumentReadExceptionGetToOneRelatedResourceWithToManyRelationship" xml:space="preserve">
    <value>Unable to get the 'to-one' related CLR resource [type={0}] with a 'to-many' CLR relationship object. Call the get 'to-one' related CLR resource method with a 'to-one' CLR relationship object.</value>
  </data>
  <data name="DocumentReadExceptionTitle" xml:space="preserve">
    <value>Document Read Error</value>
  </data>
  <data name="DocumentWriteExceptionTitle" xml:space="preserve">
    <value>Document Write Error</value>
  </data>
  <data name="DocumentWriteToOneResourceLinkageMismatch" xml:space="preserve">
    <value>The CLR resource [type={0} id={1}] has a 'to-one' relationship [rel={2}] with different 'to-one' resource linkage from user building [{3}] compared to user include [{4}].</value>
  </data>
  <data name="DomExceptionDetailNodeAlreadyContainsChildNode" xml:space="preserve">
    <value>The DOM node [type={0}] already contains DOM child node [type={1}]. Only add the DOM child node [type={1}] once.</value>
  </data>
  <data name="DomExceptionDetailNodeAlreadyContainsRelBasedChildNode" xml:space="preserve">
    <value>The DOM node [type={0}] already contains DOM child node [rel={1} type={2}]. Only add the DOM child node [rel={1} type={2}] once.</value>
  </data>
  <data name="DomExceptionDetailNodeGetMissingAttribute" xml:space="preserve">
    <value>The DOM node [type={0}] attribute [name={1}] is missing. Can only get existing attributes.</value>
  </data>
  <data name="DomExceptionDetailNodeHasChildNodesThatMustNotCoexist" xml:space="preserve">
    <value>The DOM node [type={0}] already contains DOM child node [type={1}], can not add DOM child node [type={2}] because these two DOM child nodes can not coexist as sibling DOM nodes. Would violate the JSON API specification.</value>
  </data>
  <data name="DomExceptionDetailNodeHasIncompatibleChildNodes" xml:space="preserve">
    <value>The DOM node [type={0}] contains incompatible DOM child node [type={1}] and DOM child node [type={2}].</value>
  </data>
  <data name="DomExceptionDetailNodeHasNoServiceModel" xml:space="preserve">
    <value>The DOM node  [type={0}] has no access to a service model.</value>
  </data>
  <data name="DomExceptionDetailNodeHasUnexpectedChildNode" xml:space="preserve">
    <value>The DOM node [type={0}] contains an unexpected DOM child node [type={1}].</value>
  </data>
  <data name="DomExceptionDetailNodeSetExistingAttribute" xml:space="preserve">
    <value>The DOM node [type={0}] attribute [name={1}] already exists. Can only set an attribute one-time.</value>
  </data>
  <data name="DomExceptionTitle" xml:space="preserve">
    <value>Internal DOM Error</value>
  </data>
  <data name="InternalErrorExceptionDetailMissingExtension" xml:space="preserve">
    <value>{0} has missing '{1}' extension. Ensure extension is configured and added correctly to the {0} object.</value>
  </data>
  <data name="InternalErrorExceptionDetailUnknownEnumerationValue" xml:space="preserve">
    <value>Unknown or unexpected {0} enumeration value of '{1}'.</value>
  </data>
  <data name="InternalErrorExceptionTitle" xml:space="preserve">
    <value>Internal Error</value>
  </data>
  <data name="MetadataExceptionDetailMissingMetadata" xml:space="preserve">
    <value>{0} has missing {1} metadata. Ensure metadata is configured correctly for the respective domain/schema.</value>
  </data>
  <data name="MetadataExceptionTitle" xml:space="preserve">
    <value>Metadata Error</value>
  </data>
  <data name="ObjectDisposedExceptionDetailDocumentContext" xml:space="preserve">
    <value>Cannot access a disposed object. A common cause of this error is disposing a document context that was resolved from dependency injection and then later trying to use the same document context instance elsewhere in your application. This may occur is you are calling Dispose() on the document context, or wrapping the document context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing document context instances.</value>
  </data>
</root>